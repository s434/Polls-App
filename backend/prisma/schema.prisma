// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  polls        Poll[]   @relation("UserPolls")
  votes        Vote[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Poll {
  id          String       @id @default(uuid())
  question    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creatorId   String
  creator     User         @relation("UserPolls", fields: [creatorId], references: [id])
  options     PollOption[]
  votes       Vote[]
}

model PollOption {
  id       String  @id @default(uuid())
  text     String
  pollId   String
  poll     Poll    @relation(fields: [pollId], references: [id])
  votes    Vote[]
}

model Vote {
  id           String     @id @default(uuid())
  userId       String
  pollId       String
  pollOptionId String
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

  // enforce one vote per user per poll
  @@unique([userId, pollId], name: "one_vote_per_user_per_poll")
}
